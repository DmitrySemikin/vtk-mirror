#!/bin/bash
#TEST_PROGRAM_NUMBER=$1
#ENABLESMP=$2
#ENABLE_SMP_BLOCK_MODE=$3
#THREAD_NUMBER=$4
#SPLIT_SMP_BLOCKS=$5
#WORK_LOAD=$6
#O_PERF_EVENTS=$7
#ROOT_FOLDER=$8
#ADDITIONAL_DATA = $9 -- this is optional

#./SMPBenchMarking.sh $O_PROFILE_ENABLE 1 true true 4 1000 100 "$O_PERF_EVENTS" "$LOCAL_DIRECTORY"
# (Enable/Disable oprof)  (test#) (smpEnable) (blockSplitting Enable) (#ofProcessors)  (#of smp blocks) (worksize)


#-------------------------------------------------------CONFIGURE SETTINGS HERE ------------------------------------------------
#SPECIFY WHICH TEST TO RUN
TESTS_TO_RUN="4"

#AVERAGE NUMBER OF ITERATIONS
NUMBER_OF_TIMES_TEST_RUN=4

#NUMBER OF WORKSIZE SAMPLES TAKEN
NUMBER_OF_SAMPLES=10

#MAXIUM NUMBER OF PROCESSORS
MAX_PROCESSORS=4

#Enable/Disable Oprofile
O_PROFILE_ENABLE=0

#Set Oprofile Events
O_PERF_EVENTS=" "

#-------------------------------------------------------CONFIGURE SETTINGS HERE END------------------------------------------------

#make results directory
RESULTS_DIRECTORY="results"
mkdir "$RESULTS_DIRECTORY"

#set output csv file
OUTPUT_CSV_FILE="$RESULTS_DIRECTORY/timings.csv"

# Set Rootfolder to current date
if [ $O_PROFILE_ENABLE -eq 1 ]; then
	dt=Test_$(date '+%d-%m-%Y_%H-%M-%S');
	mkdir "$RESULTS_DIRECTORY/$dt"
fi

#PUT DateTime into csv
echo "$(date '+%d-%m-%Y_%H-%M-%S')" >> "$OUTPUT_CSV_FILE"

echo "Number of Iterations Run,TestCase Number,NumberOfProcessors,SMP-ON/OFF,BLOCKING-ON/OFF,# blocks,WorkSize,ExecutionTime" >> "$OUTPUT_CSV_FILE"
#---------------------TEST CASE 1-------------------------
# Test SMP overhead versus old multi-threader
# This test does a very numerical operation filter imagecast
if [[ ${TESTS_TO_RUN[*]} =~ 1 ]]; then

	echo "TestCase1" >> "$OUTPUT_CSV_FILE"

	LOCAL_DIRECTORY="$RESULTS_DIRECTORY/$dt/TestCase1"
	if [ $O_PROFILE_ENABLE -eq 1 ]; then
		mkdir $LOCAL_DIRECTORY
	fi

	# Run test base class

	echo "---,SMP-ON BLOCKING-OFF,---,---,---" >> "$OUTPUT_CSV_FILE"

	for (( k = 10; k <= 100; k+=10 ))
	do
		for (( j = 4; j <= $MAX_PROCESSORS; j++ ))
		do
			echo " ,$j PROCESSORS" >> "$OUTPUT_CSV_FILE"
			for (( i = 10; i <= 8000; i+=((8000-10)/$NUMBER_OF_SAMPLES) ))
			do
			    ./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 1 true false $j $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY"  "$OUTPUT_CSV_FILE"
			done
		done


	# echo "---,SMP-ON BLOCKING-ON,---,---,---" >> "$OUTPUT_CSV_FILE"

	# for (( j = 1; j <= $MAX_PROCESSORS; j++ ))
	# do
	# 	echo " ,$j PROCESSORS" >> "$OUTPUT_CSV_FILE"
	# 	for (( i = 10; i <= 8000; i+=((8000-10)/$NUMBER_OF_SAMPLES) ))
	# 	do
	# 	    ./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 1 true true $j $i 1000 "$O_PERF_EVENTS" "$LOCAL_DIRECTORY"  "$OUTPUT_CSV_FILE"
	# 	done
	# done

	# Run Test

	echo "---,SMP-OFF,---,---,---" >> "$OUTPUT_CSV_FILE"


	./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 1 false false 4 $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE"

	done

fi


#---------------------TEST CASE 2-------------------------
# Test image dot product
# This test checks to see if blocking/non blocking has any effect
# On the speed since good data-access is key in dot product

if [[ ${TESTS_TO_RUN[*]} =~ 2 ]]; then

	echo "TestCase2" >> "$OUTPUT_CSV_FILE"

	LOCAL_DIRECTORY="$RESULTS_DIRECTORY/$dt/TestCase2"
	if [ $O_PROFILE_ENABLE -eq 1 ]; then
		mkdir $LOCAL_DIRECTORY
	fi
	# Run test base class

	for (( k = 10; k <= 100; k+=10 ))
	do
		echo "---,SMP-ON BLOCKING-ON,---,---,---" >> "$OUTPUT_CSV_FILE"

		for (( j = 4; j <= $MAX_PROCESSORS; j++ ))
		do
			for (( i = 10; i <= 8000; i+=((8000-10)/$NUMBER_OF_SAMPLES) ))
			do
			./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 2 true true $j $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE"
			done
		done

		echo "---,SMP-OFF,---,---,---" >> "$OUTPUT_CSV_FILE"
	# Run Test
		./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 2 false false 4 $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE"
	done
fi


#---------------------TEST CASE 3-------------------------
# Test Imagereslice 90 degree image rotation
# This test among other things mainly tests for
# Data Access pattern again by doing a 90 degree rotation

if [[ ${TESTS_TO_RUN[*]} =~ 3 ]]; then
	echo "TestCase 3" >> "$OUTPUT_CSV_FILE"

	LOCAL_DIRECTORY="$RESULTS_DIRECTORY/$dt/TestCase3"
	if [ $O_PROFILE_ENABLE -eq 1 ]; then
		mkdir $LOCAL_DIRECTORY
	fi

	ADDITIONAL_DATA="testCaseThreeDataHigh.jpg"
	# Run test base class

	for (( k = 100; k <= 100; k+=10 ))
	do
		echo "---,SMP-ON BLOCKING-ON,---,---,---" >> "$OUTPUT_CSV_FILE"
		for (( j = 4; j <= $MAX_PROCESSORS; j++ ))
		do
			for (( i = 10; i <= 10000; i+=((10000-10)/$NUMBER_OF_SAMPLES) ))
			do
			./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 3 true false $j $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE" "$ADDITIONAL_DATA"
			done
		done
		# Run Test
		echo "---,SMP-ON BLOCKING-OFF,---,---,---" >> "$OUTPUT_CSV_FILE"
		./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN 3 false false 4 $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE" "$ADDITIONAL_DATA"
	done

fi


#---------------------TEST CASE 4-------------------------
# Test Imagereslice 90 degree image rotation
# This test among other things mainly tests for
# Data Access pattern again by doing a 90 degree rotation

TEST_CASE=4

if [[ ${TESTS_TO_RUN[*]} =~ 4 ]]; then
	echo "TestCase 4" >> "$OUTPUT_CSV_FILE"

	LOCAL_DIRECTORY="$RESULTS_DIRECTORY/$dt/TestCase3"
	if [ $O_PROFILE_ENABLE -eq 1 ]; then
		mkdir $LOCAL_DIRECTORY
	fi

	# Run test base class

	for (( k = 100; k <= 100; k+=10 ))
	do
		echo "---,SMP-ON BLOCKING-ON,---,---,---" >> "$OUTPUT_CSV_FILE"
		for (( j = 4; j <= $MAX_PROCESSORS; j++ ))
		do
			for (( i = 10; i <= 10000; i+=((10000-10)/$NUMBER_OF_SAMPLES) ))
			do
			./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN $TEST_CASE true false $j $i $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE"
			done
		done
		#Run Test
		echo "---,SMP-ON BLOCKING-OFF,---,---,---" >> "$OUTPUT_CSV_FILE"
		./SMPBenchMarking.sh $O_PROFILE_ENABLE $NUMBER_OF_TIMES_TEST_RUN $TEST_CASE false false 4 100 $k "$O_PERF_EVENTS" "$LOCAL_DIRECTORY" "$OUTPUT_CSV_FILE"
	done

fi
